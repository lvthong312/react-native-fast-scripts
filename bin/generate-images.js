// scripts/generate-images.js
import fs from "fs";
import path from "path";

const args = process.argv.slice(2);
// Default output directory = project root
let __dirname = process.cwd();

// Check for --dir argument
const dirIndex = args.findIndex((arg) => arg.startsWith("--dir"));
if (dirIndex !== -1) {
  const dirArg = args[dirIndex].split("=")[1] || args[dirIndex + 1];
  if (dirArg) {
    // Replace '@' with '.' to resolve project-relative path
    __dirname = path.resolve(process.cwd(), dirArg.replace(/^@/, "."));
    args.splice(dirIndex, 2);
  }
}

// Ensure output directory exists
if (!fs.existsSync(__dirname)) {
  fs.mkdirSync(__dirname, { recursive: true });
}
// ======== C·∫•u h√¨nh ========

const imagesDir = path.resolve(__dirname, "."); // folder svgs
const outputFile = path.resolve(__dirname, "./index.ts");
const outputImageBaseFile = path.resolve(__dirname, "./ImageBase.tsx");

const files = fs.readdirSync(imagesDir);

// Filter image files and ignore @2x/@3x in the name
const imageFiles = files
  .filter((file) => /\.(png|jpe?g|svg)$/i.test(file))
  .filter((file) => !/@[23]x\./.test(file)); // ignore @2x/@3x files

const exportLines = imageFiles.map((file) => {
  let key = path
    .basename(file, path.extname(file))
    .replace(/@[23]x$/, "")
    .replace(/[\s-]/g, "_")
    .toLowerCase();
  return `  ${key}: require('./${file}')`; // note './images/' v√¨ file index n·∫±m ngo√†i folder images
});

// th√™m comment auto-generated
const headerComment = `// ‚ö†Ô∏è This file is auto-generated by generate-images.js
// Do not edit this file manually.\n`;

// t·∫°o export object
const exports = `export const images = {\n${exportLines.join(",\n")}\n};`;

// t·∫°o type
const type = `export type ImageName = keyof typeof images;`;
const content = `${headerComment}\n${exports}\n\n${type}\n`;

fs.writeFileSync(outputFile, content, "utf8");
console.log(`‚úÖ Generated ${outputFile} with ${imageFiles.length} images.`);

// t·∫°o component ImageBase
const component = `import React from 'react';
import { Image, type ImageProps } from 'react-native';
import { images, type ImageName } from './index.ts';
type ImageBaseProps =
  | {
      name: ImageName;
      width?: number;
      height?: number;
      color?: string;
      size?: number;
      uri?: string;
    }
  | {
      name?: never;
      width?: number;
      height?: number;
      color?: string;
      size?: number;
      uri?: string;
    };

export const ImageBase: React.FC<
  ImageBaseProps & Omit<ImageProps, 'uri' | 'size' | 'width' | 'height'>
> = ({ name, uri, size, width = 24, height = 24, color, ...rest }) => {
  return (
    <Image
      source={uri ? { uri } : images[name!]}
      style={{ width: size || width, height: size || height, tintColor: color }}
      {...rest}
    />
  );
};
`;
fs.writeFileSync(
  outputImageBaseFile,
  `${headerComment}\n${component}\n`,
  "utf8"
);

console.log(
  `‚úÖ Generated ${outputImageBaseFile} with ${files.length} SVG icons.`
);

// ================================
// Watch mode
// ================================
// if (process.argv.includes('--watch')) {
//   console.log('üëÄ Watching for changes in', imagesDir);
//   generate();
//   fs.watch(imagesDir, { recursive: false }, (eventType, filename) => {
//     if (/\.(png|jpe?g|svg)$/i.test(filename)) {
//       console.log(`üîÑ Change detected: ${filename}, regenerating...`);
//       try {
//         generate();
//       } catch (err) {
//         console.error('‚ùå Error regenerating files:', err);
//       }
//     }
//   });
// } else {
//   generate();
// }
